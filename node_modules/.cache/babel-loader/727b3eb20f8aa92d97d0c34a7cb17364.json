{"ast":null,"code":"import axios from \"axios\";\nconst url = \"https://api.onec.in/api/v1/naas\";\nconst contract_address = process.env.REACT_APP_NAAS_CONTRACT_ADDRESS; //your contract address\n\nconst contract_type = \"721\"; //your contract type\n\nconst getApikeyurl = \"http://localhost:6969/uploadimage\";\nconst apiKey = \"ff189e70-b00a-4f33-9f29-81f48931f6a4\";\nexport const uploadImageToIpfs = async file => {\n  // try {\n  //   // let apiKey = await axios.get(getApikeyurl);\n  //   // apiKey = apiKey.data;\n  //   // console.log(\"apiKey\", apiKey);\n  //   const res = await axios.post(`${url}/ipfsFile/`, file, {\n  //     headers: {\n  //       \"NAAS-APIKEY\": apiKey,\n  //     },\n  //   });\n  //   return res.data;\n  // } catch (e) {\n  //   console.log(e);\n  // }\n  console.log(\"file\", file);\n  const res = await axios.post(getApikeyurl, file); // console.log(\"res\", res);\n};\nexport const NftMint = async (nftmetadata, address) => {\n  var data = {\n    metadata_list: [{\n      public_address: address,\n      metadata: nftmetadata\n    }],\n    contract_address: contract_address,\n    contract_type: contract_type\n  };\n  console.log(data);\n\n  if (data.metadata_list[0].public_address == undefined) {\n    return \"Ethereum Address is required\";\n  } else {\n    try {\n      let apiKey = await axios.get(getApikeyurl);\n      apiKey = apiKey.data;\n      const res = await axios.post(`${url}/mintNFT/`, data, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"NAAS-APIKEY\": apiKey\n        }\n      });\n      return res.data;\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  }\n};\n_c = NftMint;\nexport const NftStatus = async nft_id => {\n  try {\n    if (nft_id == undefined) {\n      return \"NFT ID is required\";\n    } else {\n      let apiKey = await axios.get(getApikeyurl);\n      apiKey = apiKey.data;\n      const res = await axios.get(`${url}/checkMintStatus/${nft_id}`, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"NAAS-APIKEY\": apiKey\n        }\n      });\n      return res.data;\n    }\n  } catch (e) {\n    console.log(e);\n  }\n};\n_c2 = NftStatus;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"NftMint\");\n$RefreshReg$(_c2, \"NftStatus\");","map":{"version":3,"sources":["/Users/beckybutton/Documents/GitHub/ethcc1/nftminter/src/action/nft.js"],"names":["axios","url","contract_address","process","env","REACT_APP_NAAS_CONTRACT_ADDRESS","contract_type","getApikeyurl","apiKey","uploadImageToIpfs","file","console","log","res","post","NftMint","nftmetadata","address","data","metadata_list","public_address","metadata","undefined","get","headers","error","NftStatus","nft_id","e"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,MAAMC,GAAG,GAAG,iCAAZ;AAEA,MAAMC,gBAAgB,GAAGC,OAAO,CAACC,GAAR,CAAYC,+BAArC,C,CAAsE;;AACtE,MAAMC,aAAa,GAAG,KAAtB,C,CAA6B;;AAE7B,MAAMC,YAAY,GAAG,mCAArB;AACA,MAAMC,MAAM,GAAG,sCAAf;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,IAAP,IAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,IAApB;AACA,QAAMG,GAAG,GAAG,MAAMb,KAAK,CAACc,IAAN,CAAWP,YAAX,EAAyBG,IAAzB,CAAlB,CAf+C,CAgB/C;AACD,CAjBM;AAmBP,OAAO,MAAMK,OAAO,GAAG,OAAOC,WAAP,EAAoBC,OAApB,KAAgC;AACrD,MAAIC,IAAI,GAAG;AACTC,IAAAA,aAAa,EAAE,CACb;AACEC,MAAAA,cAAc,EAAEH,OADlB;AAEEI,MAAAA,QAAQ,EAAEL;AAFZ,KADa,CADN;AAOTd,IAAAA,gBAAgB,EAAEA,gBAPT;AAQTI,IAAAA,aAAa,EAAEA;AARN,GAAX;AAUAK,EAAAA,OAAO,CAACC,GAAR,CAAYM,IAAZ;;AAEA,MAAIA,IAAI,CAACC,aAAL,CAAmB,CAAnB,EAAsBC,cAAtB,IAAwCE,SAA5C,EAAuD;AACrD,WAAO,8BAAP;AACD,GAFD,MAEO;AACL,QAAI;AACF,UAAId,MAAM,GAAG,MAAMR,KAAK,CAACuB,GAAN,CAAUhB,YAAV,CAAnB;AACAC,MAAAA,MAAM,GAAGA,MAAM,CAACU,IAAhB;AACA,YAAML,GAAG,GAAG,MAAMb,KAAK,CAACc,IAAN,CAAY,GAAEb,GAAI,WAAlB,EAA8BiB,IAA9B,EAAoC;AACpDM,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEP,yBAAehB;AAFR;AAD2C,OAApC,CAAlB;AAMA,aAAOK,GAAG,CAACK,IAAX;AACD,KAVD,CAUE,OAAOO,KAAP,EAAc;AACdd,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBa,KAArB;AACD;AACF;AACF,CA9BM;KAAMV,O;AAgCb,OAAO,MAAMW,SAAS,GAAG,MAAOC,MAAP,IAAkB;AACzC,MAAI;AACF,QAAIA,MAAM,IAAIL,SAAd,EAAyB;AACvB,aAAO,oBAAP;AACD,KAFD,MAEO;AACL,UAAId,MAAM,GAAG,MAAMR,KAAK,CAACuB,GAAN,CAAUhB,YAAV,CAAnB;AACAC,MAAAA,MAAM,GAAGA,MAAM,CAACU,IAAhB;AACA,YAAML,GAAG,GAAG,MAAMb,KAAK,CAACuB,GAAN,CAAW,GAAEtB,GAAI,oBAAmB0B,MAAO,EAA3C,EAA8C;AAC9DH,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEP,yBAAehB;AAFR;AADqD,OAA9C,CAAlB;AAOA,aAAOK,GAAG,CAACK,IAAX;AACD;AACF,GAfD,CAeE,OAAOU,CAAP,EAAU;AACVjB,IAAAA,OAAO,CAACC,GAAR,CAAYgB,CAAZ;AACD;AACF,CAnBM;MAAMF,S","sourcesContent":["import axios from \"axios\";\nconst url = \"https://api.onec.in/api/v1/naas\";\n\nconst contract_address = process.env.REACT_APP_NAAS_CONTRACT_ADDRESS; //your contract address\nconst contract_type = \"721\"; //your contract type\n\nconst getApikeyurl = \"http://localhost:6969/uploadimage\";\nconst apiKey = \"ff189e70-b00a-4f33-9f29-81f48931f6a4\";\n\nexport const uploadImageToIpfs = async (file) => {\n  // try {\n  //   // let apiKey = await axios.get(getApikeyurl);\n  //   // apiKey = apiKey.data;\n  //   // console.log(\"apiKey\", apiKey);\n  //   const res = await axios.post(`${url}/ipfsFile/`, file, {\n  //     headers: {\n  //       \"NAAS-APIKEY\": apiKey,\n  //     },\n  //   });\n  //   return res.data;\n  // } catch (e) {\n  //   console.log(e);\n  // }\n  console.log(\"file\", file);\n  const res = await axios.post(getApikeyurl, file);\n  // console.log(\"res\", res);\n};\n\nexport const NftMint = async (nftmetadata, address) => {\n  var data = {\n    metadata_list: [\n      {\n        public_address: address,\n        metadata: nftmetadata,\n      },\n    ],\n    contract_address: contract_address,\n    contract_type: contract_type,\n  };\n  console.log(data);\n\n  if (data.metadata_list[0].public_address == undefined) {\n    return \"Ethereum Address is required\";\n  } else {\n    try {\n      let apiKey = await axios.get(getApikeyurl);\n      apiKey = apiKey.data;\n      const res = await axios.post(`${url}/mintNFT/`, data, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"NAAS-APIKEY\": apiKey,\n        },\n      });\n      return res.data;\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  }\n};\n\nexport const NftStatus = async (nft_id) => {\n  try {\n    if (nft_id == undefined) {\n      return \"NFT ID is required\";\n    } else {\n      let apiKey = await axios.get(getApikeyurl);\n      apiKey = apiKey.data;\n      const res = await axios.get(`${url}/checkMintStatus/${nft_id}`, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"NAAS-APIKEY\": apiKey,\n        },\n      });\n\n      return res.data;\n    }\n  } catch (e) {\n    console.log(e);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}